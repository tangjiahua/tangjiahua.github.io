[ { "title": "linux工具", "url": "/posts/linux-tool/", "categories": "Linux", "tags": "技术", "date": "2021-09-11 00:11:00 +0800", "snippet": "来源：https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.htmlLinux工具基础命令帮助 info command：显示工具的详细信息 man command：显示工具的使用手册 whatis command：显示工具的简介 which command：显示工具的所在路径 whereis command：显示工具的搜索路径（当系统中安装了同一个软件的多个版本，就可以用这个命令）文件和目录管理 ls -lrt：时间排序，-r是reverse，-t是时间排序 cat：将文件或标..." }, { "title": "libco框架笔记", "url": "/posts/libco/", "categories": "开源", "tags": "技术", "date": "2021-09-06 00:00:00 +0800", "snippet": "libco源码分析分享：intel和at&amp;amp;t的汇编语法的区别，然后就是栈切换的原理数据对齐过程调用时候的栈帧是，P保存调用Q的时候的参数保存。P保存从Q返回回来的时候，需要执行的下一条指令的地址。adc：eax, edx, ecx是由P去管理的寄存器bsd：ebx, esi, edi是由Q去管理的寄存器栈空间的分配内存对齐： 作者：圆珠笔链接：https://www.zhihu.com/question/59201886/answer/162932167来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 先扯句题外话，直..." }, { "title": "Tmux &amp; iTerm2", "url": "/posts/tmux-learn/", "categories": "Unix网络编程", "tags": "技术", "date": "2021-05-25 00:11:00 +0800", "snippet": "iTerm2 + Tmux结合的操作方法创建新的Window：tmux ls &amp;amp;&amp;amp; read session &amp;amp;&amp;amp; tmux -CC attach -t ${session:-default} || tmux -CC new -s ${session:-default}tmux -CC 后面跟上的命令都和一般的tmux相同Command+Shift+W可以直接快速detach当前的session(Command+Control+A是快捷键，一般设置为快速打开一个新的Session窗口)iTerm2 切换 tab：⌘+←, ..." }, { "title": "《孤岛惊魂Online》游戏后台架构思路", "url": "/posts/far-cry-ol-fu-wu-qi-jia-gou/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-24 01:28:00 +0800", "snippet": "参考资料天涯明月刀后台技术创新龙之谷服务器设计射击游戏的物理引擎应用和移动模拟腾讯游戏学院技术类课程后台设计" }, { "title": "游戏服务器架构思路", "url": "/posts/you-xi-fu-wu-qi-jia-gou-si-lu/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-23 22:31:00 +0800", "snippet": "设计标准腾讯对项目上线有一系列标准，在此简要列举几点：1、架构设计要合理，支持弹性动态扩容能力，高可用容灾能力。2、服务器性能要满足要求。3、符合DB规范。4、符合运维规范。设计架构要求：1、弹性动态扩展能力，逻辑层要求支持线上动态扩容，并且要求对用户无影响。2、高可用容灾能力，核心模块和关键路径不允许有单点，不允许无法扩展。3、要求对同时大并发访问有防雪崩机制，比如排队、访问频率控制等，防止过载。4、要求非关键核心模块故障不影响玩家主逻辑服务，可提供有损服务。5、不允许数据变更未及时入库，导致可能发生10分钟以上的回档。DB规范：1、按需Cache，存储层实现分库分表平行扩展或接入TS..." }, { "title": "第二十四课：服务器可用性设计", "url": "/posts/fu-wu-qi-ke-yong-xing-she-ji/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-22 15:01:00 +0800", "snippet": "第一章：服务器可用性的概念可用性的概念和度量系统在面对各种异常时可以提供正常服务的能力正常服务业务和生存系统业务是不一样的，生存系统业务指一个服务的核心业务，如QQ的通信服务，播放器的播放服务，游戏的核心玩法。可用性的度量：可用性级别略影响可用性的因素   错误 灾难 分类 功能错误进程宕机硬件故障 系统故障自然灾害人为破坏 关注人 开发人员 运维人员 出现频率 频繁 小 灾难问题一般由运维人..." }, { "title": "第二十三课：核心逻辑设计——登录系统", "url": "/posts/deng-lu-xi-tong/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-22 14:16:00 +0800", "snippet": "第一章：什么是登录系统登录系统简述玩家通过客户端与服务器建立连接，在服务器哥哥进程上完成需要的账号和角色数据创建，并进入游戏场景开始游戏的流程。搭建登录系统的准备工作 实现接入服务器（connect server） 实现db存取（DB server + mysql） 制定协议（protobuf）第二章：基本流程 建立/断开连接 用户登录/登出 创建/删除/修改角色 进入/离开场景设计模式 状态模式 多进程分别维护账户登录状态上下文 通过网络消息驱动 分层状态机设计 简单的登录流程 消息驱动 多层状态机 分布式第三章：性..." }, { "title": "第二十二课：服务器并发设计", "url": "/posts/fu-wu-qi-bing-fa-she-ji/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-22 13:28:00 +0800", "snippet": "第一章：并发的概念并发vs并行并行(Parallel)：程序的一个状态，有多个程序同时进行，多线程或者多进程是实现的手段。一个执行流可以模拟出一个并发的效果。并发(Concurrent)：程序的多个操作，可以在同样的时间段内重叠进行。并发是并行的一个子集，并行可以用来实现并发。你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。并发的关键是你有处理多个任务的能力，不一定要同时。并行的关键是你有同时处理多个任务的..." }, { "title": "第二十一课：游戏服务器存储系统设计", "url": "/posts/cun-chu-xi-tong-she-ji/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-22 13:15:00 +0800", "snippet": "第一章：数据存储基础什么是数据存储数据存储管理 &amp;amp; 数据库系统介绍关系型数据库介绍 优点 减少数据冗余（满足范式的基础） 保证数据完整性 SQL语言提供了强大的查询功能 问题 数据结构复杂情况下表结构难以维护 性能一般，容易产生性能瓶颈 可扩展性较差 NOSQL数据库介绍 优点 易于维护 性能高 可扩展性好 问题 容易产生数据冗余 不支持SQL查询 第二章：游戏服务器架构与数据存储..." }, { "title": "第二十课：游戏开发中的数据表示", "url": "/posts/shu-ju-biao-shi/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-22 12:22:00 +0800", "snippet": "第一章：数据表示基础导语不同的语言、不同的编译架构、处理器架构导致了不同环境下的数据表示可能出现问题。因此我们需要一个DR System来作为中间层，它是异构系统间通信的桥梁，保证双方的数据表示是相同的。什么是数据表示 数据表示 Data Representation(DR for short) 什么是数据 Data are the facts or details from which information is derived 如何表示数据 Various forms for same infor..." }, { "title": "第十九课：核心逻辑设计——战斗系统进阶", "url": "/posts/fu-wu-qi-tong-xin/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-22 12:11:00 +0800", "snippet": "第一章：概述从实例介绍网络通信的基础知识略，计算机网络课有大把的基础知识第二章：CS通信网络通信的基本过程 TCP：可靠、适合大数据量、频繁交互的 UDP：可靠性要求不高、小数据量、性能更佳通过对UDP再应用层的处理其实可以保证可靠。传输协议及应用实例 PC上QQ的CS交互 一般情况：UDP 网络差：TCP 拉取大文件如图片：TCP 手机上微信的CS交互 前台：TCP长连接 后台：TCP短连接 查看文章等：HTTP（TCP短连接） 常见问题及优化设计CS交互的一些问题：其他要点： ..." }, { "title": "第十八课：MMORPG AI系统设计与实现", "url": "/posts/AI-xi-tong-she-ji-yu-shi-xian/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-21 17:07:00 +0800", "snippet": "第一章：MMORPG AI基础MMORPG AI简历什么是MMORPG AI游戏内NPC能够通过环境或事件的变化进行逻辑判断，从而同玩家进行产生特定的行为交互。它主要包括三个部分：感知 -&amp;gt; 决策 -&amp;gt; 行动。 感知：侦测周围环境变化的能力，如玩家进入视野、受到攻击 决策：根据环境变化思考做出何种反馈，是整个AI框架主要的构成部分，常见的有状态机、行为树 行动：NPC做出的具体反馈，如释放技能、寻路等操作MMORPG AI架构AI在顶层，下层包括寻路、移动、技能、 视野朴素的AI-Hard Code直接用if-else语句就可以编写AI，然而遇到更复杂的..." }, { "title": "第十七课：核心逻辑设计——战斗系统进阶", "url": "/posts/zhan-dou-xi-tong-jin-jie/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-21 16:37:00 +0800", "snippet": "第一章：网络问题实际网络环境会导致的情况实际的网络环境：导致的问题： 出手的粘滞感 combo技能由于网络波动无法继续 由于网络波动，上行到服务器的消息比预期的要迟，导致combo技能超时被打断 特殊引导技能由于网络波动，导致技能之间动作不连贯 网络波动导致下行包到达客户端的时间不符合预期 Req-Cache/Rsp-Cache第二章：性能问题性能问题的瓶颈在于CPU、流量和内存，从1V1到1000人混战的转变CPU性能问题 强交互高实时性要求 毛刺和雪崩 玩家的随机聚集导致毛刺进而导致雪崩 ..." }, { "title": "第十六课：核心逻辑设计——战斗系统基础", "url": "/posts/zhan-dou-xi-tong-ji-chu/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-21 10:58:00 +0800", "snippet": "游戏战斗系统核心抽象模型什么是战斗系统 客户端：负责接收玩家战斗指令，根据服务器的驱动进行表现 服务器：负责逻辑驱动技能基本框架 技能过程定义 技能实体在生命过程中，可以通过抽象划分为一系列的阶段 不同的技能类型即为这些阶段组合而成的过程 技能阶段 Start - 技能开始 Cost - 消耗处理 Reading - 吟唱 Channeling - 引导 OnCast - 出手 Project - 弹道飞行中 OnHit - 击中 Finish - 一个..." }, { "title": "第十五课：移动和视野管理", "url": "/posts/yi-dong-he-shi-ye-guan-li/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-20 23:10:00 +0800", "snippet": "为什么需要数据同步简单来说，网络游戏需要数据同步玩家的状态与动作。最常见的同步“移动同步”2D移动的实现玩家移动的表达一（移动向量）： POS当前的位置 DIR朝向 V速度同步的时机： 转向 变速 停止解释：上行延迟直接拖拽的情况：上行数据包延迟过大，到达服务器太晚了，服务器如果发现这个位移包在原来走过的路径上，那就将该角色直接恢复拖拽到原来的那个位置，在游戏里面延迟大的时候就是表现为“走不动”。上行延迟加一个固定时长：每次只能走0.5秒，如果超过0.5秒没有发包过来，也就是出现延迟的话，那就让该角色停下来不要动，即需要定时上传移动包。下行延迟运动补偿的情况：快速将对方用户拉..." }, { "title": "第十四课：生产环境介绍", "url": "/posts/sheng-chan-huan-jing-jie-shao/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-20 22:15:00 +0800", "snippet": "介绍生产环境和开发环境的差异生产环节的定义、要素线上环境、生产环节都一个意思，略过。开发环境的主要差异   开发环境 生产环境 规模 几十台机器构成，供少量开发人员使用 上千台机器，为海量用户提供服务 网络 局域网，网速稳定，无波动 广域网，用户网速波动频繁，有被攻击的风险 稳定 按需启停，基本无强制性要求 应对各种突发事故，确保高可用性 更新 不受限制，快速迭代 ..." }, { "title": "第十三课：线上运行控制", "url": "/posts/xian-shang-yun-xing-kong-zhi/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-18 21:43:00 +0800", "snippet": "概念定义和要素当系统正在运行，出现硬件故障或逻辑异常的时候，对当前运行状态进行旁路控制，以保障系统可用性，限制故障发生的范围，避免灾难扩散要素： 监控：及时发现系统异常 容灾：应对故障的自动执行机制，保障系统可用性 控制：对已经发生的异常进行人工干预，屏蔽故障或限制故障范围开发和运维的分工   开发 运维 监控 格式化输出系统内信息，给出告警规则。 收集信息，进行展示；对数据进行统计分析，并按照规则告警。 容灾 设计开发容灾系统，给出故障预案。 ..." }, { "title": "第十二课：核心系统设计——服务器地形", "url": "/posts/fu-wu-qi-di-xing/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-18 01:55:00 +0800", "snippet": "服务器地形管理基础概念地形：山川河流路面等等为什么要有地形管理？ 用数据描述地形信息 组织高度，阻挡信息 提供玩家定位访问、信息访问机制 为上层模块提供定位服务服务器如何描述地形数据？ 2D游戏 grid网格 无高度信息，只有阻挡信息 3D游戏 3D地形场景 服务器地形管理实践2D的实现方式： Grid Mask网格 二维数组，（x，y）判断位置 获取grid信息是用的mask特征 3D的实现方式： Grid Layer网格 三位数组，新增layer..." }, { "title": "第十一课：随机数在游戏中的应用", "url": "/posts/sui-ji-shu-ying-yong/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-17 16:21:00 +0800", "snippet": "基本介绍在游戏中的应用 游戏玩法：抽卡、开宝箱 模拟自然现象：火焰、植被、生物群落（火焰粒子发射器） 离线渲染、光线追踪 随机生成内容（随机关卡）两种伪随机概念计算机概念： 真随机：需要外部的随机来源如量子、噪音等等 伪随机：用算法生成看似随机的序列 策划概念： 真随机：每次判断都是独立的 伪随机：指同一类的概率事件，彼此之间存在关联性，通常保证用户体验 游戏中常用随机策略 伪随机策略：保底法（买五次必得一次铭文） 其他伪随机策略 稀有道具全服控制总量 洗牌算法 ..." }, { "title": "深入理解计算机系统笔记", "url": "/posts/csapp-note/", "categories": "基础技术", "tags": "技术", "date": "2021-04-14 22:00:33 +0800", "snippet": "第1章：计算机系统漫游程序的编译方式 汇编阶段：汇编器将hello.s翻译成机器语言指令，把这些指令打包成一种叫做可重定位目标程序的格式，并将结果保存在目标文件hello.o中。hello.o是一个二进制文件，它包含的17个字节是函数main的指令编码。 链接阶段：printf函数存在于一个名为printf.o的单独的预编译好了的目标文件中，而这个文件必须以某种方式合并到我们的hello.o程序中。链接器（ld）就负责处理这种合并。结果就得到hello文件，它是一个可执行的目标文件（或者简称为可执行文件），可以被加载到内存中，由系统执行。处理器读并解释存储在内存中的指令shell是一..." }, { "title": "第十课：网络同步技术", "url": "/posts/tong-bu-fang-an/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-10 16:55:00 +0800", "snippet": "基本概念设计目标游戏开发设计的要素 公平：确定性、安全性 体验：延迟低、稳定性 开销：流量、计算量、研发成本传输数据分析常用同步方案一致性：帧同步一致性：状态同步及时性：通用方案方案对比" }, { "title": "第九课：运行环境与运维", "url": "/posts/yun-xing-huan-jing-yu-yun-wei/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-10 16:50:00 +0800", "snippet": "运行环境运行环境，指一种把变异好的程序在目标机器上运行的后台环境。是软件运行所要求的各种条件，包括软硬件环境。物理部署问题：假如某款产品同时在线1000W，需要多少台机器？ 估算步骤 预估用户数量：总注册数，并发读写量，同时在线数量 压力测试，得出单机承载数量 备份、容灾处理 总的机器数量=接入层机器数量+逻辑层机器数量（同时在线数量/单机承载数量）+DB层机器数量+备份机器数量系统的可运维性 确保系统的正常运行状态 灰度 负载均衡 排除系统的异常运行状态 日志：日志是否完善很..." }, { "title": "第八课：游戏逻辑与反外挂", "url": "/posts/you-xi-luo-ji-yu-fan-wai-gua/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-10 14:17:00 +0800", "snippet": "游戏逻辑服务器游戏逻辑服务器游戏服务器整体架构：游戏服务器的作用 游戏数据存储 与其他玩家交互的中转 玩法驱动和逻辑 反外挂和防作弊（韩国上网实名制，所以反外挂逻辑的一般都在客户端，而不会在服务器判断）游戏服务器状态图时间间隔驱动：时间中断出去检查是否有一些相关逻辑需要处理，比如发现某个计时器倒计时结束以3D MMORPG为例子阐述服务器程序的实现游戏对象管理地图的描述将其转换成0与1的二维数组，以达到判断能不能走到某些位置的目的。地图上玩家的管理以32*32的大小，把地图分成N个区域，每个区域里面的玩家、NPC等玩家，弄成链表为什么需要视野管理？视野管理确定服务器能承受的最大的..." }, { "title": "第七课：游戏支撑系统", "url": "/posts/you-xi-zhi-cheng-xi-tong/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-09 17:10:00 +0800", "snippet": "支撑系统概述登录流程LoginServer职责 鉴权 返回服务器列表，角色信息，推荐服务器等 白名单（灰度服务器）和黑名单 基于版本好的更新控制（强制更新/推荐更新） 与客户端基于Session的DH密钥交换 登录公告DH密钥交换：其他相关技术点捏脸的技术点方式一（image base）：游戏共随机样本，利用人脸识别技术检索最像的；方式二（image base）：美术怼照片捏出来多个模型，AI学习；方式三（3d base）：基于3D mesh骨骼，由照片推导基本参数，直径应用于模型排行榜技术 模糊排名（桶排序），非实时百分比展示排名结果，排序周期可配置，排名精度可配置 T..." }, { "title": "第六课：游戏人工智能", "url": "/posts/you-xi-ren-gong-zhi-neng/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-08 23:53:00 +0800", "snippet": "游戏人工智能综述人工智能在游戏中的应用 赋能与效率 游戏体验 开发效率 应用领域 玩游戏 内容生成 玩家体验衡量 人工智能在游戏制作中的主要方法决策有限状态机（FSM）离散、有限的性质 优点 快速简单 计算开销少 缺点 状态过多的时候，难以维护 改进方式：分层大状态是战斗、休息，小状态是内部的一些状态。行为树（Behavior Tree） 优点 逻辑结构清晰 行为数据与逻辑分离 可重用 ..." }, { "title": "第五课：分布式系统设计", "url": "/posts/fen-bu-shi-xi-tong/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-07 16:20:00 +0800", "snippet": "分布式系统概览分布式系统指分布在硬件设备上的多个软件组件，彼此通过网络来通信和协作的系统。分布式系统需要考虑的问题包括：业务模块划分、负载均衡、融在容错、网络通信等消息队列：专门负责消息传递的通用中间件。特点：解耦发送方和接收方、稳定可靠感性认识分布式系统：腾讯游戏通信方案-TBUS（进程间通信） TBUS地址 World.Zone.Func.Instance 微信.一区.pvp战斗进程.1号 例子 进程A：1.1.2.1；进程B：1.1.3.1； TBUSD A：1.1.1.1；TBUSD B：1.1.1.2； ..." }, { "title": "第四课：游戏后台开发工具", "url": "/posts/kai-fa-gong-ju/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-07 14:56:00 +0800", "snippet": "开发语言C++新特性：auto, nullptr, decltype, lamda, constexpr找mentor拿到项目组的代码规范、开发流程规范。开发环境Linux系统监控系统命令：perf, vmstat, gdb, trace, top, ifconfig, ulimit, lsof腾讯开发组件介绍tsf4g(Tencent Service Framework For Game)1 接入层 - TGW TGW(Tencent Gateway) 支持自动负载均衡的系统 可靠性高、扩展性强、性能高、抗攻击能力强2 接入层 tconnd 腾讯网络接入公共组件 为不同应用场..." }, { "title": "第三课：浅谈游戏后台开发+游戏技术人员的野望", "url": "/posts/qiantanyouxihoutaikaifa/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-06 22:20:00 +0800", "snippet": "游戏后台解决的三大问题 网络通信 仲裁计算 数据存储Books C++编程思想 Effective C++ Unix网络编程（卷1:套接字联网API） UNIX环境高级编程 TCP/IP详解 设计模式：可复用面向对象软件的基础 重构：改善既有代码的设计游戏后台涉及的技术 同步方案 帧同步（王者荣耀移动） 状态同步 不同运营商之间的通信层处理 加速软件 服务器使用三块网卡同时接入三个运营商 网络状态切换（WiFi到4G） 游戏后台的核心技术 通信 TCP、UD..." }, { "title": "第二课：游戏服务器架构概要", "url": "/posts/youxifuwuqijiagougaiyao/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-06 20:03:00 +0800", "snippet": "《轩辕传奇》——MMORPG分区多世界的服务器架构运营的视角运维的视角客户端的视角大世界（无缝地图）：将一个大地图分成不同的区域，每个区域用一个进程去承载，所有控制也需要一个主进程去承载。跨世界共享：不同世界接触到的相同东西，单独提出来作为公共服务进行处理。主备从架构。逻辑处理和持久化数据再同一个物理机上遇到的问题： DB的IO太多 日志文件 物理机故障将相对独立、变化少的功能（如邮件系统）拆分出来。慎用多线程，除非只有单一职责，否则不要用多线程。主线程里逻辑太过复杂会需要添加很多锁。切分的原则：接入与负载可用性在线控制GM系统：管理员系统，通过聊天室上传，给GM开通权限。经分系统..." }, { "title": "第一课：敲打的是乐趣", "url": "/posts/qiaodadeshilequ/", "categories": "腾讯游戏学院", "tags": "技术", "date": "2021-04-06 17:37:00 +0800", "snippet": "前言演讲者：李东，腾讯互动娱乐 光子工作室群 基础研究组组长。《绝地求生：刺激战场》引擎开发组长。技术准备编程基础 C++（保证运行效率）&amp;amp;Script（保证开发效率） Framework（游戏开发基本框架） actor包含所有的物体，能够跟玩家发生互动的都算。组件开发：actor都是挂接不同组件进行开发的。 Threading（多线程框架） 逻辑线程+渲染线程 加载的话有一到两个IO异步线程 一到两个音频播放线程（音频的解码和音频的播放是单独的线程） 任务线程（比较费时间的，..." }, { "title": "鸟哥的Linux私房菜笔记", "url": "/posts/v-bird-linux-note/", "categories": "基础技术", "tags": "技术", "date": "2021-04-06 01:40:00 +0800", "snippet": "重点回顾0x01 计算机的五大单元：输入单元、输出单元、控制单元、算术逻辑单元、存储单元，其中CPU占有算术逻辑单元和控制单元，存储单元包含内存和辅助内存； CPU设计理念依据RISC精简指令集和CISC复杂指令集； CPU频率：外频是CPU与外部元件进行数据传输时的速度，倍频是CPU内部用来加速工作性能的一个倍数，两者承积才是CPI的频率； 个人电脑的内存主要元件为DRAM，CPU内部的第二层高速缓存则使用SRAM； 目前主流的外接卡接口为PCIe接口； 磁盘连接到主板的接口大多为SATA或者SAS，台式机主流为SATA 3.0；0x02 操作系统功能：管理与驱动硬件，管..." }, { "title": "给学弟学妹们的关于校招的一些经验教训", "url": "/posts/to-nowcoder/", "categories": "杂谈", "tags": "技术", "date": "2021-04-06 01:09:00 +0800", "snippet": "序言​ 作为一个21届还没毕业的小朋友，我的校招到现在为止才算是尘埃落定了，自认为在找工作这件事上踩了不少坑，所以也想留下一点我自己的一些经验给后面参加校招的学弟学妹们，因为自己没有记录面试题目和写面经的习惯，所以之前都没有在收到offer的时候写面经反馈给大家，到现在基本已经不记得面试被问过的问题了……不过好在牛客上有很多优秀的面经可以去学习，我这里就不班门弄斧了，想另辟蹊径讲一讲关于校招那些踩过的坑，以及如何避免踩坑的问题。个人介绍​ 首先介绍一下自己，一枚普通985的计科学生，没参加什么竞赛，也没获得什么大赛奖项，属于比较普普通通地度过了大学三年，成绩也就在保不上的水平吧，因为..." }, { "title": "配置我的终端", "url": "/posts/config-my-terminal/", "categories": "基础技术", "tags": "技术", "date": "2021-04-06 01:08:00 +0800", "snippet": "序言本文主要目的是帮助自己快速配置本地终端。功能介绍我的私人oh-my-zsh配置包括如下：插件配置：auto-suggestions, auto-syntax-highlighting, git代理配置：调用proxy_on或proxy_off可以开启终端的代理，这要配合clashX使用vim配置：vim配置文件在/jiahua目录下，叫做.vimrcalias配置：快速调用应用流程插件配置通过$ cat /etc/shells查看shells如果系统中没有zsh，则需要安装：// Linux$ sudo yum install zsh (Fedora和RedHat以及SUSE中..." }, { "title": "操作系统与Linux简介", "url": "/posts/os&linux-introduction/", "categories": "基础技术", "tags": "技术", "date": "2021-04-06 00:36:00 +0800", "snippet": "操作系统的基本原理操作体系概论1.1 操作系统的定义应用程序-&amp;gt;实用程序-&amp;gt;操作系统-&amp;gt;硬件单向调用的关系1.2 操作系统的形成与发展顺序处理、简单的批处理多道批处理系统：以主存为中心，与CPU相连，用通道与I/O设备相连，存放多个作业，在主存中同时存放多个作业，根本目的是提高PCU的利用率，充分发挥并行性。通过资源利用率（实际使用时间/给定时间）、吞吐量（单位时间内系统处理的信息量）、周转时间（作业进入系统到退出系统所经历的时间）批处理系统使用多道程序技术后，存在问题：不能直接控制作业运行、作业的周转时间长，提出了分时系统分时系统：将CPU单位..." }, { "title": "我的vim常用命令", "url": "/posts/vim-command-for-me/", "categories": "基础技术", "tags": "技术", "date": "2021-03-30 15:52:33 +0800", "snippet": "Vim常用命令删除操作dw:删除从光标开始后面的字符daw:删除光标所在的词bdw:跳回光标所在该单词开头，然后删除dd:删除一行移动操作# 字符移动w:移动到下一个单词首b:移动到上一个单词首e:移动到下一个单词结尾ge:移动到上一个单词结尾^:移动到行首$:移动到行尾# 相对屏幕移动ctrl+fctrl+bctrl+e:按行下滚ctrl+y:按行上滚H:移动到屏幕首行L:到屏幕尾行M:到屏幕中间zt:置顶当前行zz:将当前行移动到屏幕中部zb:将当前行移动到底部文件中移动通过:10可以直接移动光标到文件第10行。如果你看不到行号，可以:set number。 gg移到文件首行，G移到..." }, { "title": "C++ Primer Plus 精华笔记", "url": "/posts/C++-Primer-Plus-notes/", "categories": "基础技术", "tags": "技术", "date": "2021-03-30 15:52:33 +0800", "snippet": "第2章：开始学习C++让程序访问名称空间std的方法有如下4种： using namespace std; 放在函数定义之前，让函数能够使用空间std的所有元素； using namespace std;放在函数中； 在特定函数使用using std::cout； 完全不用using，而是直接std::cout；第4章：复合类型面向对象编程与传统的过程性编程的区别在于，OOP强调的是在运行阶段（而不是编译阶段）进行决策。在运行阶段做决策并非OOP独有的，但使用C++编写这样的代码比使用C语言简单。int *p1, p2; // 对于每一个指针变量名，都需要一个星号。C++中，in..." }, { "title": "你好，世界！", "url": "/posts/hello-world/", "categories": "意识流随笔", "tags": "生活", "date": "2021-03-30 10:34:00 +0800", "snippet": "大标题小标题三标题普通文本//代码片段int main(){ hello world;}" } ]
